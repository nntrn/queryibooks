#!/usr/bin/env bash
# shellcheck disable=SC2034,SC1090
# Author: https://github.com/nntrn
# Repository: https://github.com/nntrn/queryibooks

set -e

PROG=queryibooks
VERSION=2.1.2
TODAY="$(date +%F)"
SCRIPT=$(realpath $0)
DIR=${SCRIPT%/*}

USER_IBOOKS=$HOME/Library/Containers/com.apple.iBooksX
QUERYIBOOKS_CACHE="$HOME/.cache/queryibooks"
QUERYIBOOKS_LOGFILE=$QUERYIBOOKS_CACHE/log.txt
QUERYIBOOKS_ENV=$QUERYIBOOKS_CACHE/.env
QUERYIBOOKS_CACHE="$QUERYIBOOKS_CACHE/$TODAY"
QUERYIBOOKS_CHECKPOINT=
QUERYIBOOKS_USECACHE=0

mkdir -p $QUERYIBOOKS_CACHE

declare -A db_annotations
db_annotations[name]=annotations
db_annotations[path]="$(ls -1 $USER_IBOOKS/Data/Documents/AEAnnotation/*.sqlite)"
db_annotations[sql]="select * from ZAEANNOTATION
where ZANNOTATIONSELECTEDTEXT IS NOT NULL
and ZANNOTATIONSELECTEDTEXT <> ''
and ZANNOTATIONDELETED = 0;"

declare -A db_assets
db_assets[name]=assets
db_assets[path]="$(ls -1 $USER_IBOOKS/Data/Documents/BKLibrary/*.sqlite)"
db_assets[sql]="select * from ZBKLIBRARYASSET;"

HELP_TEXT='
Tool for extracting iBooks annotations

Usage:
  queryibooks [-f|--force] [-w|--write-to] [-c|--max-cache-age]
  queryibooks [-h|--help] [-v|--version]

Options:
  -f, --force             Run database update regardless of cache age
  -w, --write-to          Where to write output to
  -c, --use-cache         Use data from last run
  -c, --max-cache-age
  -h, --help
  -v, --version

Environment:
  QUERYIBOOKS_FORCE=1           # same as --force
  QUERYIBOOKS_USECACHE=1        # same as --use-cache
  QUERYIBOOKS_OUTPUT=<FILEPATH>
  QUERYIBOOKS_MAX_CACHE=<minutes>
'

_usage() {
  echo "$HELP_TEXT"
  exit 1
}

_version() {
  echo "$PROG-$VERSION"
  exit 0
}

_log() {
  if [[ QUERYIBOOKS_VERBOSE -eq 1 ]]; then
    echo -e "\033[0;${2:-33}m$1\033[0m" 3>&2 2>&1 >&3 3>&-
  fi
  echo -e "$(date +'%F %X') $1" >>$QUERYIBOOKS_LOGFILE
}

sync_database() {
  local DB="$1"
  QUERYIBOOKS_CHECKPOINT=
  if [[ -f $DB-wal ]]; then
    DB_LASTMOD=$(stat -f %m "$DB")
    WAL_LASTMOD=$(stat -f %m "$DB-wal")
    if [[ $DB_LASTMOD -lt $WAL_LASTMOD ]]; then
      _log "Running checkpoint on ${DB##*/}"
      sqlite3 $DB 'pragma wal_checkpoint;' >/dev/null
      QUERYIBOOKS_CHECKPOINT=1
    fi
  fi
}

querydata() {
  local -n data=$1
  local FORCE=${QUERYIBOOKS_FORCE}
  local TABLE="${data[name]}"
  local DB_PATH="${data[path]}"
  local SQL="${data[sql]}"
  local SAVEFILE="${QUERYIBOOKS_CACHE}/${TABLE}.json"

  [[ $QUERYIBOOKS_USECACHE -ne 1 ]] && sync_database "$DB_PATH"

  if [[ $QUERYIBOOKS_CHECKPOINT -eq 1 || ! -f $SAVEFILE || $QUERYIBOOKS_FORCE -eq 1 ]]; then
    _log "Running sqlite3 for ${DB_PATH##*/}"
    sqlite3 -json "$DB_PATH" "$SQL" ".exit" >$SAVEFILE
    _log "Saved to $SAVEFILE"
  else
    _log "Skip run for ${DB_PATH##*/}"
  fi
}

while true; do
  case $1 in
  -h | --help) _usage ;;
  -v | --version) _version ;;
  -f | --force) QUERYIBOOKS_FORCE=1 ;;
  -o | --write-to) QUERYIBOOKS_OUTPUT=$2 && shift ;;
  -c | --use-cache) QUERYIBOOKS_USECACHE=1 ;;
  --verbose) QUERYIBOOKS_VERBOSE=1 ;;
  esac
  shift || break
done

if ! command -v jq &>/dev/null; then
  echo "Download jq before continuing.. Aborting"
  exit 1
fi

querydata db_assets
querydata db_annotations

jq --slurpfile assets $QUERYIBOOKS_CACHE/assets.json -L $DIR \
  'include "queryibooks"; create_annnotations' $QUERYIBOOKS_CACHE/annotations.json >$QUERYIBOOKS_CACHE/ibooks.json

if [[ -n $QUERYIBOOKS_OUTPUT ]]; then
  cp "$QUERYIBOOKS_CACHE/ibooks.json" "$QUERYIBOOKS_OUTPUT"
  echo "Saved to $QUERYIBOOKS_OUTPUT"
else
  cat $QUERYIBOOKS_CACHE/ibooks.json
fi

# '($books[] | map(. + {cdate: (.created|strptime("%Y-%m-%dT%H:%M:%SZ")|mktime|strftime("%Y-%m-%d"))}) |INDEX(.[];.assetid)) as $asset'
